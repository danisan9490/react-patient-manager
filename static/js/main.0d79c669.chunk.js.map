{"version":3,"sources":["components/Appointment.js","components/Form.js","App.js","serviceWorker.js","index.js"],"names":["Appointment","appointment","deleteAppointment","console","log","className","pet","owner","date","time","symptoms","onClick","id","Form","createappointment","useState","setappointment","error","setError","handleChange","e","target","name","value","onSubmit","preventDefault","trim","uuidv4","type","placeholder","onChange","App","localStorageAppointments","JSON","parse","localStorage","getItem","appointments","setAppoinments","useEffect","setItem","stringify","newAppointments","filter","title","length","map","key","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"+MAqBeA,EAlBK,SAAC,GAAwC,IAAtCC,EAAqC,EAArCA,YAAaC,EAAwB,EAAxBA,kBAElC,OADAC,QAAQC,IAAIH,GAEV,yBAAKI,UAAU,eACb,mCAAQ,8BAAOJ,EAAYK,KAA3B,KACA,qCAAU,8BAAOL,EAAYM,OAA7B,KACA,oCAAS,8BAAON,EAAYO,MAA5B,KACA,oCAAS,8BAAOP,EAAYQ,MAA5B,KACA,wCAAa,8BAAOR,EAAYS,UAAhC,KAEA,4BACEL,UAAU,6BACVM,QAAS,kBAAMT,EAAkBD,EAAYW,MAF/C,mB,sBC8FSC,EAxGF,SAAC,GAA2B,IAAzBC,EAAwB,EAAxBA,kBAAwB,EAEAC,mBAAS,CAC7CT,IAAK,GACLC,MAAO,GACPC,KAAM,GACNC,KAAM,GACNC,SAAU,KAP0B,mBAE/BT,EAF+B,KAElBe,EAFkB,OAUZD,oBAAS,GAVG,mBAU/BE,EAV+B,KAUxBC,EAVwB,KAW9BZ,EAAqCL,EAArCK,IAAKC,EAAgCN,EAAhCM,MAAOC,EAAyBP,EAAzBO,KAAMC,EAAmBR,EAAnBQ,KAAMC,EAAaT,EAAbS,SAG1BS,EAAe,SAACC,GACpBJ,EAAe,2BACVf,GADS,kBAEXmB,EAAEC,OAAOC,KAAOF,EAAEC,OAAOE,UAyB9B,OACE,kBAAC,WAAD,KACE,oCACA,0BACEC,SAxBoB,SAACJ,GACzBA,EAAEK,iBAEiB,KAAfnB,EAAIoB,QAAkC,KAAjBnB,EAAMmB,QAAiC,KAAhBlB,EAAKkB,QAAiC,KAAhBjB,EAAKiB,QAAqC,KAApBhB,EAASgB,QAIrGR,GAAS,GACTjB,EAAYW,GAAKe,cACjBb,EAAkBb,GAClBe,EAAe,CACbV,IAAK,GACLC,MAAO,GACPC,KAAM,GACNC,KAAM,GACNC,SAAU,MAXVQ,GAAS,KAsBP,2CACA,2BACEU,KAAK,OACLN,KAAK,MACLjB,UAAU,eACVwB,YAAY,WACZC,SAAUX,EACVI,MAAOjB,IAGT,6CACA,2BACEsB,KAAK,OACLN,KAAK,QACLjB,UAAU,eACVwB,YAAY,aACZC,SAAUX,EACVI,MAAOhB,IAGT,uCACA,2BACEqB,KAAK,OACLN,KAAK,OACLjB,UAAU,eACVyB,SAAUX,EACVI,MAAOf,IAGT,uCACA,2BACEoB,KAAK,OACLN,KAAK,OACLjB,UAAU,eACVyB,SAAUX,EACVI,MAAOd,IAGT,2CACA,8BACEJ,UAAU,eACViB,KAAK,WACLQ,SAAUX,EACVI,MAAOb,IAGT,4BACEkB,KAAK,SACLvB,UAAU,+BAFZ,uBAKDY,EAAQ,uBAAGZ,UAAU,gBAAb,0BAAyD,OCxCzD0B,MA1Df,WAGE,IAAIC,EAA2BC,KAAKC,MAAMC,aAAaC,QAAQ,iBAC1DJ,IACHA,EAA2B,IALhB,MAQ0BjB,mBAAS,IARnC,mBAQNsB,EARM,KAQQC,EARR,KAUbC,qBAAU,WACuBN,KAAKC,MAAMC,aAAaC,QAAQ,kBAE7DD,aAAaK,QAAQ,eAAgBP,KAAKQ,UAAUJ,IACpDlC,QAAQC,IAAIiC,IAGZF,aAAaK,QAAQ,eAAgBP,KAAKQ,UAAU,OAErD,CAACJ,IAEJ,IAIMnC,EAAoB,SAAAU,GACxB,IAAM8B,EAAkBL,EAAaM,QAAO,SAAA1C,GAAW,OAAIA,EAAYW,KAAOA,KAC9E0B,EAAeI,IAGXE,EAAgC,IAAxBP,EAAaQ,OAAe,kBAAoB,eAE9D,OACE,6BACE,gDACA,yBAAKxC,UAAU,eACf,yBAAKA,UAAU,OACb,yBAAKA,UAAU,mBACb,kBAAC,EAAD,CACES,kBAlBgB,SAAAb,GACxBqC,EAAe,GAAD,mBAAKD,GAAL,CAAmBpC,SAoB7B,yBAAKI,UAAU,mBACb,4BAAKuC,GACJP,EAAaS,KAAI,SAAA7C,GAAW,OAC3B,kBAAC,EAAD,CACE8C,IAAK9C,EAAYW,GACjBX,YAAaA,EACbC,kBAAmBA,WCxCb8C,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAA/C,GACLd,QAAQc,MAAMA,EAAMgD,a","file":"static/js/main.0d79c669.chunk.js","sourcesContent":["import React from 'react';\r\n\r\n\r\nconst Appointment = ({ appointment, deleteAppointment }) => {\r\n  console.log(appointment)\r\n  return (\r\n    <div className=\"appointment\">\r\n      <p>Pet: <span>{appointment.pet}</span> </p>\r\n      <p>Owner: <span>{appointment.owner}</span> </p>\r\n      <p>Date: <span>{appointment.date}</span> </p>\r\n      <p>Time: <span>{appointment.time}</span> </p>\r\n      <p>Symptoms: <span>{appointment.symptoms}</span> </p>\r\n\r\n      <button\r\n        className=\"button delete u-full-width\"\r\n        onClick={() => deleteAppointment(appointment.id)}\r\n      >Eliminar &times;</button>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Appointment;","import React, { Fragment, useState } from 'react';\r\nimport { v4 as uuidv4 } from 'uuid';\r\n\r\nconst Form = ({ createappointment }) => {\r\n\r\n  const [appointment, setappointment] = useState({\r\n    pet: '',\r\n    owner: '',\r\n    date: '',\r\n    time: '',\r\n    symptoms: ''\r\n  });\r\n\r\n  const [error, setError] = useState(false)\r\n  const { pet, owner, date, time, symptoms } = appointment\r\n\r\n\r\n  const handleChange = (e) => {\r\n    setappointment({\r\n      ...appointment,\r\n      [e.target.name]: e.target.value\r\n    })\r\n    // console.log(e.target.value)\r\n  }\r\n\r\n  const submitappointment = (e) => {\r\n    e.preventDefault();\r\n    // validation\r\n    if (pet.trim() === '' || owner.trim() === '' || date.trim() === '' || time.trim() === '' || symptoms.trim() === '') {\r\n      setError(true);\r\n      return;\r\n    }\r\n    setError(false);\r\n    appointment.id = uuidv4();\r\n    createappointment(appointment);\r\n    setappointment({\r\n      pet: '',\r\n      owner: '',\r\n      date: '',\r\n      time: '',\r\n      symptoms: ''\r\n    })\r\n  }\r\n\r\n\r\n  return (\r\n    <Fragment>\r\n      <h2>Form</h2>\r\n      <form\r\n        onSubmit={submitappointment}\r\n      >\r\n        <label>Pet Name</label>\r\n        <input\r\n          type=\"text\"\r\n          name=\"pet\"\r\n          className=\"u-full-width\"\r\n          placeholder=\"Pet Name\"\r\n          onChange={handleChange}\r\n          value={pet}\r\n        />\r\n\r\n        <label>Owner Name</label>\r\n        <input\r\n          type=\"text\"\r\n          name=\"owner\"\r\n          className=\"u-full-width\"\r\n          placeholder=\"Owner Name\"\r\n          onChange={handleChange}\r\n          value={owner}\r\n        />\r\n\r\n        <label>Date</label>\r\n        <input\r\n          type=\"date\"\r\n          name=\"date\"\r\n          className=\"u-full-width\"\r\n          onChange={handleChange}\r\n          value={date}\r\n        />\r\n\r\n        <label>Time</label>\r\n        <input\r\n          type=\"time\"\r\n          name=\"time\"\r\n          className=\"u-full-width\"\r\n          onChange={handleChange}\r\n          value={time}\r\n        />\r\n\r\n        <label>Symptoms</label>\r\n        <textarea\r\n          className=\"u-full-width\"\r\n          name=\"symptoms\"\r\n          onChange={handleChange}\r\n          value={symptoms}\r\n        ></textarea>\r\n\r\n        <button\r\n          type=\"submit\"\r\n          className=\"u-full-width button-primary\"\r\n        >Create appointment</button>\r\n      </form>\r\n      {error ? <p className=\"alert-error \">All files are required</p> : null}\r\n    </Fragment>\r\n  )\r\n}\r\n\r\nexport default Form;","import React, { useState, useEffect } from 'react';\nimport Appointment from './components/Appointment';\nimport Form from './components/Form';\n\nfunction App() {\n\n  // check local storage\n  let localStorageAppointments = JSON.parse(localStorage.getItem('appointments'));\n  if (!localStorageAppointments) {\n    localStorageAppointments = [];\n  }\n\n  const [appointments, setAppoinments] = useState([]);\n\n  useEffect(() => {\n    let localStorageAppointments = JSON.parse(localStorage.getItem('appointments'));\n    if (localStorageAppointments) {\n      localStorage.setItem('appointments', JSON.stringify(appointments));\n      console.log(appointments)\n\n    } else {\n      localStorage.setItem('appointments', JSON.stringify([]));\n    }\n  }, [appointments])\n\n  const createappointment = appointment => {\n    setAppoinments([...appointments, appointment])\n  }\n\n  const deleteAppointment = id => {\n    const newAppointments = appointments.filter(appointment => appointment.id !== id);\n    setAppoinments(newAppointments)\n  }\n\n  const title = appointments.length === 0 ? 'No appointments' : 'Appointments';\n\n  return (\n    <div>\n      <h1>Patients Manager</h1>\n      <div className=\"container \"></div>\n      <div className=\"row\">\n        <div className=\"one-half column\">\n          <Form\n            createappointment={createappointment}\n          />\n        </div>\n        <div className=\"one-half column\">\n          <h2>{title}</h2>\n          {appointments.map(appointment => (\n            <Appointment\n              key={appointment.id}\n              appointment={appointment}\n              deleteAppointment={deleteAppointment}\n            />\n          ))}\n\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}